value = 2017),#sliderinput ends here
br(),
selectInput("month", label="Select Month",
c("January", "February", "March", "April",
"May", "June", "July", "August", "September",
"October", "November", "December"), width = "100%"),
br(),
div(id = "expr-container", tags$style(css),
selectInput("address", label="Select Station Code", choices =
c("101", "102", "103", "104", "105",
"106", "107", "108", "109", "110",
"111", "112", "113", "114", "115",
"116", "117", "118", "119", "120",
"121", "122", "123", "124", "125"
), width = "100%"),#select input ends here
"Address of Selected Station Code:",
textOutput("selected_var")
)
),   #sliderbar layout ends here
mainPanel(
width=8,
tabsetPanel
(
tabPanel("Total Pollutants",
fluidRow(
column(8, leafletOutput(outputId = "mymap", height = "250px")),
column(4, plotlyOutput(outputId = "pie1", height = "250px"))
)
,
br(),
fluidRow(
column(8, plotlyOutput(outputId = "bar1", height = "250px")
))),
tabPanel("PM2.5",
fluidRow(
column(6, leafletOutput(outputId = "PM2.5map", height = "250px")),
column(6, plotlyOutput(outputId = "line1", height = "250px"))
),
br(),
fluidRow(
column(8, plotlyOutput(outputId = "circle1", height = "250px")
))
),
tabPanel("PM10",
fluidRow(
column(6, leafletOutput(outputId = "PM10map", height = "250px")),
column(6, plotlyOutput(outputId = "line2", height = "250px"))
),
br(),
fluidRow(
column(8, plotlyOutput(outputId = "circle2", height = "250px")))
),
tabPanel("CO",
fluidRow(
column(6, leafletOutput(outputId = "COmap", height = "250px")),
column(6, plotlyOutput(outputId = "line3", height = "250px"))
),
br(),
fluidRow(
column(8, plotlyOutput(outputId = "circle3", height = "250px")))
),
tabPanel("O3",
fluidRow(
column(6, leafletOutput(outputId = "O3map", height = "250px")),
column(6, plotlyOutput(outputId = "line4", height = "250px"))
),
br(),
fluidRow(
column(8, plotlyOutput(outputId = "circle4", height = "250px")))
),
tabPanel("NO2",
fluidRow(
column(6, leafletOutput(outputId = "NO2map", height = "250px")),
column(6, plotlyOutput(outputId = "line5", height = "250px"))
),
br(),
fluidRow(
column(8, plotlyOutput(outputId = "circle5", height = "250px")))
),
tabPanel("SO2",
fluidRow(
column(6, leafletOutput(outputId = "SO2map", height = "250px")),
column(6, plotlyOutput(outputId = "line6", height = "250px"))
),
br(),
fluidRow(
column(8, plotlyOutput(outputId = "circle6", height = "250px")))
)
)
)#Main panel ends here
)#fluid page ends here
#Server code
server<-function(input, output, session)
{
#assign data
output$selected_var <- renderText({
data_pie_all <- air_data[air_data$Station.code == input$address,]
data_sd2<- unique(data_pie_all$Trunc_Address)
paste(input$address,":",data_sd2)
})
#create the map
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.Toner)%>%
setView(lng = 126.9, lat = 37.5, zoom = 10.3)#  %>% #setting the view over ~ center of Seoul
#addCircleMarkers(data = air_data, lat = ~ Latitude, lng = ~ Longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = "red", popup= ~ Longitude)
})
#observe all pollutants datapoints
observe({
year_month <- air_data[air_data$Year == input$year & air_data$Month == input$month,]
year_data <- aggregate(year_month$AQI_Daily, by=list(station_code=year_month$Station.code,latitude=year_month$Latitude
,longitude=year_month$Longitude,address=year_month$Trunc_Address), mean)
map <- leafletProxy("mymap")
map %>%
clearMarkers() %>%
addCircleMarkers(data = year_data,
lng = year_data$longitude,
lat = year_data$latitude,
stroke = TRUE,
weight = 1,
color = "#d63447",
fill = TRUE,
fillColor = "#d63447",
fillOpacity = 0.6,
popup = paste(sep="\n", year_data$address),
radius = year_data$x*10/max(year_data$x))
})#observe add pollutants data points ends
########################
output$PM2.5map <- renderLeaflet({
leaflet() %>%
addTiles()%>%
setView(lng = 126.9, lat = 37.5, zoom = 10.3) %>% #setting the view over ~ center of Seoul
addCircleMarkers(data = air_data, lat = ~ Latitude, lng = ~ Longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = "red", popup= ~ Longitude)
})
#observe pm2.5 datapoints
observe({
year_month <- air_data[air_data$Year == input$year & air_data$Month == input$month,]
year_data <- aggregate(year_month$PM2.5, by=list(station_code=year_month$Station.code,latitude=year_month$Latitude
,longitude=year_month$Longitude,address=year_month$Trunc_Address), mean)
map <- leafletProxy("PM2.5map")
map %>%
clearMarkers() %>%
addCircleMarkers(data = year_data,
lng = year_data$longitude,
lat = year_data$latitude,
stroke = TRUE,
weight = 1,
color = "#d63447",
fill = TRUE,
fillColor = "#d63447",
fillOpacity = 0.6,
popup = paste(sep="\n", year_data$address),
radius = year_data$x*10/max(year_data$x))
})#observe data points ends
########################
#create the map
output$PM10map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels)%>%
setView(lng = 126.9, lat = 37.5, zoom = 10.3)  %>% #setting the view over ~ center of Seoul
addCircleMarkers(data = air_data, lat = ~ Latitude, lng = ~ Longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = "red", popup= ~ Longitude)
})
#observe pm10 datapoints
observe({
year_month <- air_data[air_data$Year == input$year & air_data$Month == input$month,]
year_data <- aggregate(year_month$PM10, by=list(station_code=year_month$Station.code,latitude=year_month$Latitude
,longitude=year_month$Longitude,address=year_month$Trunc_Address), mean)
map <- leafletProxy("PM10map")
map %>%
clearMarkers() %>%
addCircleMarkers(data = year_data,
lng = year_data$longitude,
lat = year_data$latitude,
stroke = TRUE,
weight = 1,
color = "#d63447",
fill = TRUE,
fillColor = "#d63447",
fillOpacity = 0.6,
popup = paste(sep="\n", year_data$address),
radius = year_data$x*10/max(year_data$x))
})#observe data points ends
########################
#create the map
output$COmap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)%>%
setView(lng = 126.9, lat = 37.5, zoom = 10.3)  %>% #setting the view over ~ center of Seoul
addCircleMarkers(data = air_data, lat = ~ Latitude, lng = ~ Longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = "red", popup= ~ Longitude)
})
#observe CO datapoints
observe({
year_month <- air_data[air_data$Year == input$year & air_data$Month == input$month,]
year_data <- aggregate(year_month$CO_mg_per_mm3, by=list(station_code=year_month$Station.code,latitude=year_month$Latitude
,longitude=year_month$Longitude,address=year_month$Trunc_Address), mean)
map <- leafletProxy("COmap")
map %>%
clearMarkers() %>%
addCircleMarkers(data = year_data,
lng = year_data$longitude,
lat = year_data$latitude,
stroke = TRUE,
weight = 1,
color = "#d63447",
fill = TRUE,
fillColor = "#d63447",
fillOpacity = 0.6,
popup = paste(sep="\n", year_data$address),
radius = year_data$x*10/max(year_data$x))
})#observe data points ends
########################
#create the map
output$O3map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.Toner)%>%
setView(lng = 126.9, lat = 37.5, zoom = 10.3)  %>% #setting the view over ~ center of Seoul
addCircleMarkers(data = air_data, lat = ~ Latitude, lng = ~ Longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = "red", popup= ~ Longitude)
})
#observe O3 datapoints
observe({
year_month <- air_data[air_data$Year == input$year & air_data$Month == input$month,]
year_data <- aggregate(year_month$O3_mg_per_mm3, by=list(station_code=year_month$Station.code,latitude=year_month$Latitude
,longitude=year_month$Longitude,address=year_month$Trunc_Address), mean)
map <- leafletProxy("O3map")
map %>%
clearMarkers() %>%
addCircleMarkers(data = year_data,
lng = year_data$longitude,
lat = year_data$latitude,
stroke = TRUE,
weight = 1,
color = "#d63447",
fill = TRUE,
fillColor = "#d63447",
fillOpacity = 0.6,
popup = paste(sep="\n", year_data$address),
radius = year_data$x*10/max(year_data$x))
})#observe data points ends
########################
#create the map
output$NO2map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)%>%
setView(lng = 126.9, lat = 37.5, zoom = 10.3)  %>% #setting the view over ~ center of Seoul
addCircleMarkers(data = air_data, lat = ~ Latitude, lng = ~ Longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = "red", popup= ~ Longitude)
})
#observe NO2 datapoints
observe({
year_month <- air_data[air_data$Year == input$year & air_data$Month == input$month,]
year_data <- aggregate(year_month$NO2_mg_per_mm3, by=list(station_code=year_month$Station.code,latitude=year_month$Latitude
,longitude=year_month$Longitude,address=year_month$Trunc_Address), mean)
map <- leafletProxy("NO2map")
map %>%
clearMarkers() %>%
addCircleMarkers(data = year_data,
lng = year_data$longitude,
lat = year_data$latitude,
stroke = TRUE,
weight = 1,
color = "#d63447",
fill = TRUE,
fillColor = "#d63447",
fillOpacity = 0.6,
popup = paste(sep="\n", year_data$address),
radius = year_data$x*10/max(year_data$x))
})#observe data points ends
########################
#create the map
output$SO2map <- renderLeaflet({
leaflet() %>%addTiles()%>%
addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels)%>%
#addProviderTiles(providers$Esri.NatGeoWorldMap)%>%
setView(lng = 126.9, lat = 37.5, zoom = 10.3)  %>% #setting the view over ~ center of Seoul
addCircleMarkers(data = air_data, lat = ~ Latitude, lng = ~ Longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = "red", popup= ~ Longitude)
})
#observe SO2 datapoints
observe({
year_month <- air_data[air_data$Year == input$year & air_data$Month == input$month,]
year_data <- aggregate(year_month$SO2_mg_per_mm3, by=list(station_code=year_month$Station.code,latitude=year_month$Latitude
,longitude=year_month$Longitude,address=year_month$Trunc_Address), mean)
map <- leafletProxy("SO2map")
map %>%
clearMarkers() %>%
addCircleMarkers(data = year_data,
lng = year_data$longitude,
lat = year_data$latitude,
stroke = TRUE,
weight = 1,
color = "#d63447",
fill = TRUE,
fillColor = "#d63447",
fillOpacity = 0.6,
popup = paste(sep="\n", year_data$address),
radius = year_data$x*10/max(year_data$x))
})#observe data points ends
###############################Maps ends###############################
## to display pie charts
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
pie_all<- data_pie_all%>%
summarise(SO2=mean(SO2_mg_per_mm3),
NO2=mean(NO2_mg_per_mm3),
SO2=mean(SO2_mg_per_mm3),
O3=mean(O3_mg_per_mm3),
CO=mean(CO_mg_per_mm3),
PM10=mean(PM10),
PM2.5=mean(PM2.5),)
data <- melt(as.data.table(pie_all, keep.rownames = "Vars"), id.vars = "Vars")
output$pie1 = renderPlotly(
data %>%
plot_ly() %>%
add_pie(
labels = ~variable,
values = ~value)
)
})#observe data points ends
## to display line charts
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$line1 = renderPlotly(
data_pie_all %>%
plot_ly() %>%
add_lines(x = ~Date, y = ~PM2.5, type = 'scatter', mode = 'lines+markers')%>%
layout(title = "Evolution of PM2.5 pollution level over a month",
xaxis = list(title = "Date"),
yaxis = list (title = "PM2.5 (microgram/m3)"))
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$line2 = renderPlotly(
data_pie_all %>%
plot_ly() %>%
add_lines(x = ~Date, y = ~PM10, type = 'scatter', mode = 'lines+markers')%>%
layout(title = "Evolution of PM10 pollution level over a month",
xaxis = list(title = "Date"),
yaxis = list (title = "PM10 (microgram/m3)"))
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$line3 = renderPlotly(
data_pie_all %>%
plot_ly() %>%
add_lines(x = ~Date, y = ~CO_mg_per_mm3, type = 'scatter', mode = 'lines+markers')%>%
layout(title = "Evolution of CO pollution level over a month",
xaxis = list(title = "Date"),
yaxis = list (title = "CO (microgram/m3)"))
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$line4 = renderPlotly(
data_pie_all %>%
plot_ly() %>%
add_lines(x = ~Date, y = ~O3_mg_per_mm3, type = 'scatter', mode = 'lines+markers')%>%
layout(title = "Evolution of O3 pollution level over a month",
xaxis = list(title = "Date"),
yaxis = list (title = "O3 (microgram/m3)"))
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$line5 = renderPlotly(
data_pie_all %>%
plot_ly() %>%
add_lines(x = ~Date, y = ~NO2_mg_per_mm3, type = 'scatter', mode = 'lines+markers')%>%
layout(title = "Evolution of NO2 pollution level over a month",
xaxis = list(title = "Date"),
yaxis = list (title = "NO2 (microgram/m3)"))
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$line6 = renderPlotly(
data_pie_all %>%
plot_ly() %>%
add_lines(x = ~Date, y = ~SO2_mg_per_mm3, type = 'scatter', mode = 'lines+markers')%>%
layout(title = "Evolution of SO2 pollution level over a month",
xaxis = list(title = "Date"),
yaxis = list (title = "SO2 (microgram/m3)"))
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$circle1 = renderPlotly(
data_pie_all %>%
ggplot(aes(x=Date, y=PM2.5, size=PM2.5, fill=AQIH_PM2.5)) +
geom_point(alpha=0.5, shape=21, color="black") +
scale_size(range = c(.1, 24), name="Population (M)") +
theme(legend.position="bottom") +
ylab("PM2.5 concentration for a month") +
xlab("Monthly Date") +
theme(legend.position = "none")
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$circle2 = renderPlotly(
data_pie_all %>%
ggplot(aes(x=Date, y=PM10, size=PM10, fill=AQIH_PM10)) +
geom_point(alpha=0.5, shape=21, color="black") +
scale_size(range = c(.1, 24), name="Population (M)") +
theme(legend.position="bottom") +
ylab("PM10 concentration for a month") +
xlab("Monthly Date") +
theme(legend.position = "none")
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$circle3 = renderPlotly(
data_pie_all %>%
ggplot(aes(x=Date, y=CO_mg_per_mm3, size=CO_mg_per_mm3, fill=AQIH_CO)) +
geom_point(alpha=0.5, shape=21, color="black") +
scale_size(range = c(.1, 24), name="Population (M)") +
theme(legend.position="bottom") +
ylab("CO concentration for a month") +
xlab("Monthly Date") +
theme(legend.position = "none")
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$circle4 = renderPlotly(
data_pie_all %>%
ggplot(aes(x=Date, y=O3_mg_per_mm3, size=O3_mg_per_mm3, fill=AQIH_O3)) +
geom_point(alpha=0.5, shape=21, color="black") +
scale_size(range = c(.1, 24), name="Population (M)") +
theme(legend.position="bottom") +
ylab("O3 concentration for a month") +
xlab("Monthly Date") +
theme(legend.position = "none")
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$circle5 = renderPlotly(
data_pie_all %>%
ggplot(aes(x=Date, y=NO2_mg_per_mm3, size=NO2_mg_per_mm3, fill=AQIH_NO2)) +
geom_point(alpha=0.5, shape=21, color="black") +
scale_size(range = c(.1, 24), name="Population (M)") +
theme(legend.position="bottom") +
ylab("NO2 concentration for a month") +
xlab("Monthly Date") +
theme(legend.position = "none")
)
})#observe data points ends
observe({
data_pie_all <- air_data[air_data$Year == input$year & air_data$Month == input$month & air_data$Station.code == input$address,]
output$circle6 = renderPlotly(
data_pie_all %>%
ggplot(aes(x=Date, y=SO2_mg_per_mm3, size=SO2_mg_per_mm3, fill=AQIH_SO2)) +
geom_point(alpha=0.5, shape=21, color="black") +
scale_size(range = c(.1, 24), name="Pollution of SO2") +
theme(legend.position="bottom") +
ylab("SO2 concentration for a month") +
xlab("Monthly Date") +
theme(legend.position = "none")
)
})#observe data points ends
##############bar one
observe({
pie_all<- air_data%>% group_by(Address_Code=air_data$Station.code)%>%
summarise(SO2=sum(SO2_mg_per_mm3),
NO2=sum(NO2_mg_per_mm3),
SO2=sum(SO2_mg_per_mm3),
O3=sum(O3_mg_per_mm3),
CO=sum(CO_mg_per_mm3),
PM10=sum(PM10),
PM2.5=sum(PM2.5),)
year_data <- pie_all%>%
mutate(Total = select(., SO2:PM2.5) %>% rowSums(na.rm = TRUE))
theme_set(theme_classic())
# Plot
output$bar1 = renderPlotly(
year_data%>%
ggplot(aes(Address_Code, Total))
+ geom_bar(stat="identity", width = 0.5, fill="red") +
labs(title="Most and Least polluted Area",
subtitle="Most and Least polluted Area",
caption="Most and Least polluted Area") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
)
})
}#server function ends
#Run shiny app
shinyApp(ui,server)
runApp()
runApp()
shiny::runApp()
runApp()
setwd("D:/Trinity/Data Visualization/Final Assignment/AirPollutionSeoulDataVisualization/AirPollutionSeoulDataVisualization/data")
runApp('D:/Trinity/Data Visualization/Final Assignment/AirPollutionSeoulDataVisualization/AirPollutionSeoulDataVisualization')
runApp('D:/Trinity/Data Visualization/Final Assignment/AirPollutionSeoulDataVisualization/AirPollutionSeoulDataVisualization')
runApp('D:/Trinity/Data Visualization/Final Assignment/AirPollutionSeoulDataVisualization/AirPollutionSeoulDataVisualization')
runApp('D:/Trinity/Data Visualization/Final Assignment/AirPollutionSeoulDataVisualization/AirPollutionSeoulDataVisualization')
runApp('D:/Trinity/Data Visualization/Final Assignment/AirPollutionSeoulDataVisualization/AirPollutionSeoulDataVisualization')
runApp('D:/Trinity/Data Visualization/Final Assignment/AirPollutionSeoulDataVisualization/AirPollutionSeoulDataVisualization')
runApp('D:/Trinity/Data Visualization/Final Assignment/AirPollutionSeoulDataVisualization/AirPollutionSeoulDataVisualization')
=
===
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
